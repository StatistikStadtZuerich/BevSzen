
# Housing model

```{r}
#| label: prep
#| output: false

# source general functions
if (!exists("i_scen")) {
  source(paste0(here::here(), "/1_code/0000_general/general_init.R"))
  params <- init("middle")
}

# source utility functions
run_scen(i_scen, "hou")

```

## combine: capacity/reserves and ownership prediction

### proportion of cooperative housing according to capacity/reserves
capacity/reserves contains only people due to additional (!) yearly (!) usage of reserves
therefore, add the cumulative values to the past population

with past (for plot)
why? for plotting
why a plot? to check if capacity/reserves population values are...
...meaningful in comparison to the past

```{r}
#| label: fig-1300
#| fig-cap: people, capacity, reserves
#| fig-width: 12
#| fig-height: 14

sszplot(pop_with_past,
  aes_x = "year", aes_y = "pop", aes_col = "owner",
  labs_y = "people",
  wrap = "district", ncol = 4,
  scale_y = c(0, NA),
  i_x = c(NA, date_end),
  name = plot_name("1300_people_capacity-reserves"),
  width = 12, height = 14
)
```

### proportion cooperative housing (according to capacity/reserves vs. district trends)

```{r}
#| label: fig-1301
#| fig-cap: proportion of cooperative housiing data sources
#| fig-width: 12
#| fig-height: 14

# prop_coop %>%
#   pivot_longer(
#     cols = c("prop_car", "prop_trend"),
#     names_prefix = "prop_",
#     names_to = "category", values_to = "prop"
#   ) %>%
#   mutate(
#     cat = if_else(category == "car",
#       "capacity/reserves", "district trends"
#     ),
#     district = factor(district, levels = uni_d)
#   ) %>%
#   sszplot(
#     aes_x = "year", aes_y = "prop", aes_col = "cat",
#     labs_y = "proportion of cooperative housing (in %)",
#     wrap = "district", ncol = 4,
#     scale_y = c(0, NA),
#     i_x = c(NA, date_end),
#     name = plot_name("1301_proportion-cooperative-housing_data-sources"),
#     width = 12, height = 14
#   )
```

## projects, capcity and reserves

### with the past

```{r}
#| label: fig-1302
#| fig-cap: population by district and owner
#| fig-width: 12
#| fig-height: 14

sszplot(pop_fut_past,
  aes_x = "year", aes_y = "pop", aes_col = "owner",
  labs_y = "people",
  wrap = "district", ncol = 4,
  scale_y = c(0, NA),
  i_x = c(NA, date_end),
  name = plot_name("1302_population_district-owner"),
  width = 12, height = 14
)
```

### by district (without owner)

```{r}
#| label: fig-1303
#| fig-cap: population by district
#| fig-width: 12
#| fig-height: 14

sszplot(pop_d,
  aes_x = "year", aes_y = "pop",
  labs_y = "people",
  wrap = "district", ncol = 4,
  scale_y = c(0, NA),
  i_x = c(NA, date_end),
  name = plot_name("1303_population_district"),
  width = 12, height = 14
)
```

### all (entire city)

```{r}
#| label: fig-1304
#| fig-cap: population
#| fig-width: 14
#| fig-height: 10

sszplot(pop_all,
  aes_x = "year", aes_y = "pop",
  labs_y = "people",
  scale_y = c(0, NA),
  i_x = c(NA, date_end),
  name = plot_name("1304_population"),
  width = 7, height = 5
)
```

## compare projects and reserves

### projects and reserves (cumulative amount of people)

```{r}
#| label: fig-1305
#| fig-cap: projects and reserves final
#| fig-width: 12
#| fig-height: 14

comp_pro_car <- pro_car %>% 
  replace_na(list(pop = 0, car = 0)) %>% 
  mutate(car_cum = if_else(year == date_end, pop, car),
         pro_y = if_else(year == date_end, pop, new - removed)) %>% 
  group_by(district, owner) %>% 
      arrange(year) %>% 
      mutate(pro_cum = cumsum(pro_y)) %>% 
  ungroup() %>% 
  arrange(district, owner, year) %>% 
  select(district, owner, year, pro_cum, car_cum)

#with final amount of people
cat_level <- c("projects", "reserves", "final")

pro_res_all %>%
  left_join(comp_pro_car, by = c("district", "year", "owner")) %>%
  pivot_longer(c(pro_cum, car_cum, pop), names_to = "category", values_to = "people") %>%
  mutate(
    district = factor(district, levels = uni_d),
    cat = factor(case_when(
      category == "pro_cum" ~ cat_level[1],
      category == "car_cum" ~ cat_level[2],
      TRUE ~ cat_level[3]
    ), levels = cat_level)
  ) %>%
  select(district, year, owner, cat, people) %>%
  # plot
  sszplot(
    aes_x = "year", aes_y = "people", aes_col = "cat",
    labs_y = "people",
    wrap = "district", ncol = 4, gridscale = "free_y",
    scale_y = c(0, NA),
    name = plot_name("1305_projects_reserves_final"),
    width = 12, height = 14,
    multi = uni_w
  )
```

### total people per district and ownership
WHY not with the object car_spa?
it is easier to calculate totals with the original objects
and closer to 'raw' data, i.e. ownership trends not considered

```{r}
#| label: fig-1306
#| fig-cap: projects and reserves by district and owner; people
#| fig-width: 10
#| fig-height: 10

pro_res_level <- c("projects", "reserves")

pro_dw <- pro_aca %>% 
  group_by(district, owner) %>% 
    summarize(new = sum_NA(new), 
              removed = sum_NA(removed),
              .groups = "drop") %>% 
  mutate(pro = new - removed) %>% 
  select(district, owner, pro)

pro_car_dw <- car_spa %>% 
  group_by(district, owner) %>% 
    summarize(car = sum_NA(car), 
              .groups = "drop") %>% 
  left_join(pro_dw, by = c("district", "owner")) %>% 
  pivot_longer(c(car, pro), names_to = "category", values_to = "people") %>% 
  mutate(district = factor(district, levels = uni_d),
         owner = factor(owner, levels = uni_w),
         cat = fact_if(category, pro_res_level, "pro")) %>% 
  select(district, owner, cat, people)

# WHY not piped to the plot?
# data of pro_car_dw will be used for a plot by district only (without owner)

sszplot(pro_car_dw,
  aes_x = "district", aes_y = "people", aes_fill = "cat",
  geom = "col",
  labs_x = "", labs_y = "people",
  wrap = "owner", ncol = 2,  
  scale_x = rev(uni_d),
  name = plot_name("1306_projects_reserves_dw_people"),
  width = 8, height = 8
)
```

### total proportion by district and ownership

```{r}
#| label: fig-1307
#| fig-cap: projects and reserves by district and owner; proportion
#| fig-width: 12
#| fig-height: 9

# WHY with aes_fill?
# is needed in the plot function
pro_car_dw %>% 
  group_by(district, owner) %>% 
  mutate(prop = people / sum_NA(people) * 100) %>% 
  filter(cat == pro_res_level[1]) %>% 
  sszplot(
    aes_x = "district", aes_y = "prop",
    fix_col = 1, 
    geom = "col",
    labs_x = "", labs_y = "proportion in % (projects on reserves)",
    wrap = "owner", ncol = 2,      
    scale_x = rev(uni_d),
    name = plot_name("1307_projects_reserves_dw_prop"),
    width = 8, height = 6
  )
```

### total people by district

```{r}
#| label: fig-1308
#| fig-cap: projects and reserves by district; people
#| fig-width: 10
#| fig-height: 10

pro_car_dw %>% 
  group_by(district, cat) %>% 
  summarize(people = sum_NA(people),
            .groups = "drop") %>% 
  sszplot(
    aes_x = "district", aes_y = "people", aes_fill = "cat",
    geom = "col",
    labs_x = "", labs_y = "people",
    scale_x = rev(uni_d),
    name = plot_name("1308_projects_reserves_d_people"),
    width = 8, height = 8
  )
```


### total proportion by district

```{r}
#| label: fig-1309
#| fig-cap: projects and reserves by district; proportion
#| fig-width: 10
#| fig-height: 10

# WHY with aes_fill?
# is needed in the plot function
pro_car_dw %>% 
  group_by(district, cat) %>% 
  summarize(people = sum_NA(people),
            .groups = "drop") %>% 
  group_by(district) %>% 
  mutate(prop = people / sum_NA(people) * 100) %>% 
  filter(cat == pro_res_level[1]) %>% 
  sszplot(
    aes_x = "district", aes_y = "prop",
    fix_col = 1, 
    geom = "col",
    labs_x = "", labs_y = "proportion in % (projects on reserves)",
    scale_x = rev(uni_d),
    name = plot_name("1309_projects_reserves_d_prop"),
    width = 8, height = 8
  )
```

